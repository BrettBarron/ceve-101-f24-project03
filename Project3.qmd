---
title: "CEVE 101: Project 03"
author: "Brett Barron bmb16"
date: "2024-11-25"


engine: julia
code-annotations: hover
format:
    html: default
    docx: default
---

```{julia}
using Revise                      # <1>
using RainwaterHarvesting         # <2>
```

```{julia}
filepath = "data/5.txt" # <1>   
rainfall_data = RainfallData(filepath) # <2>
```

### Plotting the Data

We now can plot the data for all the years we have data for. 

```{julia}
plot(rainfall_data) # <1>
```

### Discussion

The years kept after data cleaning are 1980 through 2024. With more than 40 years of data, I believe we have enough information to make risk assessments at a relatively high confidence level just due to the shear amount of data we have. However, although we do have plenty of data we should still be cautious because of the changing climate where rainfall patterns may change drastically in the future. Still, we do have enough data to extract a meaningful risk assessment but we must also be aware of other factors at play. For example, the Great Drought of 1877 occurred in this region of Northeastern Brazil and was the worst drought in Brazilian history displacing thousands of residents. The fact that significant droughts like this one are missing from our data because they fall outside of our time range implies that we can't tell the whole story and this region may be more susceptible to severe droughts than our data would have us believe. Once again, we have enough data to extract meaning from yet we still must practice caution. 

## Understanding the Theoretical Model

While the model used to model the volume of water in the tank at any day in a given year is a great tool to see when the system would have failed in the past, there are several limiting assumptions and approximations inherent in the model. First, the precipitation value is extracted from the data collected at a specific location but since we would be trying to implement this somewhere else (not the exact place where the collector was located) the result may be different since even within jurisdictions as small as towns or neighborhoods rainfall can vary from place to place for a variety of reasons. An example of a factor that may cause rainfall to differ within a small area is tree coverage. If we are trying to harvest rainwater at a house where there is a lot of tree coverage or more tree coverage than where the data was being collected the precipitation value assumed through the model will be incorrect. Another factor limiting the effectiveness of the model is the fact that we are calculating the inflow based on the surface area of the roof while we should be calculating it based on the largest horizontal cross section of the roof (the area of the cross section of the bottom of the roof) since this is what the rainfall will be distributed across. We can modify the model to account for these inconsistencies by changing the Roof Area parameter from the surface area to two components accounting for what I have mentioned. The first component will simply be the area of the bottom cross section of the roof and we will subtract from that the second component which will be area of tree coverage above the roof. To make it more clear, from a raindrop's perspective as it approaches the roof we can imagine the horizontal area the roof covers as our first component and the horizontal area any trees above the roof cover as the second component. Put together, our inflow equation looks something like:

Q=runoff coefficient*(horizontal area of roof minus horizontal area of trees)*max(P-f,0)    

## Model Implementation and Testing

### Defining the Model Parameters

First we run the model with the default parameters.

```{julia}
#| output: false
param = ModelParameters(          # <1>
    runoff_coefficient=0.85,      # <2>
    roof_area_m2=45.0,            # <3>
    first_flush_mm=2.0,           # <4>
    tank_capacity_L=16000.0       # <5>
)
```

The runoff coefficient is a measure of how much of the rain that falls on the roof ends up in the tank.

The roof area is the area of the roof that the rain falls on.

The first flush volume is the volume of rain that is discarded because it is dirty.

The tank capacity is the maximum volume of the tank.

### Running the Simulation for One Year

Let's run the model for the year 1981.

```{julia}
rainfall_1981 = rainfall_data.annual_data[1981]    # <1>
results_1981 = run_timesteps(rainfall_1981, param) # <2>
p1 = plot(results_1981)                                 # <3>
```

To compare rainfall and tank volume:

```{julia}
p2 = plot(rainfall_1981)
plot(p2, p1, layout=(2, 1), size=(1000, 700), link=:x)
```

We can run simulations for all years and then check how many times the tank runs dry.

```{julia}
all_years = sort(collect(keys(rainfall_data.annual_data)))          # <1>
all_results = [run_timesteps(rainfall_data.annual_data[year], param) for year in all_years]   # <2>
any_failures = [!isempty(result.failure_dates) for result in all_results]  # <3>
println("Number of years with failures: ", sum(any_failures), " out of ", length(all_years))  # <4>
```

Now we run the model again but I increased the tank capacity from 16000 L to 20000 L.
I chose to change the tank capacity because I feel like that is a factor we can easily control in real life and having a bigger tank can have a real impact on lessening the number of years of failure we have since we can better maximize the amount of water we take in during the wet season. 

```{julia}
#| output: false
param = ModelParameters(          # <1>
    runoff_coefficient=0.85,      # <2>
    roof_area_m2=45.0,            # <3>
    first_flush_mm=2.0,           # <4>
    tank_capacity_L=20000.0       # <5>
)
```

Let's run the model again with the new parameters for the same year 1981.

```{julia}
rainfall_1981 = rainfall_data.annual_data[1981]    # <1>
results_1981 = run_timesteps(rainfall_1981, param) # <2>
p1 = plot(results_1981)                                 # <3>
```

```{julia}
p2 = plot(rainfall_1981)
plot(p2, p1, layout=(2, 1), size=(1000, 700), link=:x)
```

```{julia}
all_years = sort(collect(keys(rainfall_data.annual_data)))          # <1>
all_results = [run_timesteps(rainfall_data.annual_data[year], param) for year in all_years]   # <2>
any_failures = [!isempty(result.failure_dates) for result in all_results]  # <3>
println("Number of years with failures: ", sum(any_failures), " out of ", length(all_years))  # <4>
```

### Reliability Analysis

The changes I made by increasing the size of the tank led to less failures (8 failures versus 10 failures) My 20,000 L system failed to meet demand 8 out of 36 years meaning it has a reliability percentage of 78% because the system didn't fail 78% of the time. By increasing the volume of the tanks, I decreased the number of failures but it only made a difference in two years. We could attempt to further increase the volume of the tank or increase the size of the roof in order to further decrease the number of failures. However, no matter how big we make our tank and roof, the ultimate deciding factor is the amount of rain in the year. There will be some years where there is simply not a sufficient amount of rain to satisfy our needs no matter how we design our system. 

One limitation of the model is the assumption that we will find water from other sources during the first 150 days of the year. We cannot always rely on a steady water source even during the wet season because there may be some other factors preventing us from getting water from traditional sources and it is quite possible that during some years we would have to tap into the tank earlier than 150 days in. One way to address this gap is to make an alternative C for the first 150 days where instead of C being equal to zero it is equal to some value greater than zero but not quite to the level of 74 L/day which it is at during the dry season. This way, we can have two plots. One represents the normal conditions where we don't have to tap into the tank during the wet season and the other represents the alternative situation where we do have to take water from the tank earlier than 150 days in.
